services:
  # PostgreSQL for OrderService
  postgres-orderservice:
    image: postgres:15-alpine
    container_name: postgres-orderservice
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
      POSTGRES_DB: order_service_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_order_data:/var/lib/postgresql/data
    networks:
      - backend-network

  # PostgreSQL for PaymentService
  postgres-paymentservice:
    image: postgres:15-alpine
    container_name: postgres-paymentservice
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
      POSTGRES_DB: payment_service_db
    ports:
      - "5433:5432"  # Different host port to avoid conflict
    volumes:
      - postgres_payment_data:/var/lib/postgresql/data
    networks:
      - backend-network

  # Redis Cache
  redis-cache:
    image: redis:7-alpine
    container_name: redis-cache
    ports:
      - "6379:6379"
    command: redis-server --requirepass password
    networks:
      - backend-network

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - backend-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"  # External port
      - "29092:29092"  # Internal port
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - backend-network

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8085:8080" # Changed to 8085 to avoid conflict with API Gateway
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    networks:
      - backend-network

  # API Gateway Service
  api-gateway-service:
    build:
      context: ./APIGatewayService
      dockerfile: Dockerfile
    container_name: api-gateway-service
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: product
    depends_on:
      - kafka
      - redis-cache
    networks:
      - backend-network

  # Order Service
  order-service:
    build:
      context: ./OrderService
      dockerfile: Dockerfile
    container_name: order-service
    expose:
      - "8081"  # Internal only: order-service:8081
    environment:
      SPRING_PROFILES_ACTIVE: product
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-orderservice:5432/order_service_db
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_REDIS_HOST: redis-cache
      SPRING_REDIS_PASSWORD: password
    depends_on:
      - postgres-orderservice
      - kafka
      - redis-cache
    networks:
      - backend-network

  # Payment Service
  payment-service:
    build:
      context: ./PaymentService
      dockerfile: Dockerfile
    container_name: payment-service
    expose:
      - "8082"  # Internal only: payment-service:8082
    environment:
      SPRING_PROFILES_ACTIVE: product
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-paymentservice:5432/payment_service_db
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_REDIS_HOST: redis-cache
      SPRING_REDIS_PASSWORD: password
    depends_on:
      - postgres-paymentservice
      - kafka
      - redis-cache
    networks:
      - backend-network

# Define the network properly
networks:
  backend-network:
    driver: bridge

volumes:
  postgres_order_data:
  postgres_payment_data: