# Server Configuration
server.port=8083
spring.application.name=SagaOrchestratorService

# Database Configuration - PostgreSQL (Docker container)
spring.datasource.url=jdbc:postgresql://postgres-sagaservice:5432/saga_service_db
spring.datasource.username=root
spring.datasource.password=password
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA Configuration - Production optimized
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.jdbc.batch_size=50
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.connection.pool_size=10

# Kafka Configuration - Production
spring.kafka.bootstrap-servers=kafka:29092
spring.kafka.consumer.group-id=saga-orchestrator-service
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.producer.acks=all
spring.kafka.producer.retries=5
spring.kafka.producer.properties.enable.idempotence=true
spring.kafka.producer.properties.max.in.flight.requests.per.connection=1

# Kafka Topics Configuration
kafka.topics.order-commands=order.commands
kafka.topics.order-events=order.events
kafka.topics.payment-commands=payment.commands
kafka.topics.payment-events=payment.events
kafka.topics.saga-events=saga.events
kafka.topics.dlq=saga.dlq

# Saga Configuration - Production timeouts
saga.timeout.default-minutes=10
saga.timeout.payment-minutes=10
saga.timeout.order-minutes=15
saga.retry.max-attempts=5
saga.retry.delay-seconds=10

# Monitoring Configuration - Limited exposure
management.endpoints.web.exposure.include=health,metrics
management.endpoint.health.show-details=when-authorized
management.prometheus.metrics.export.enabled=true

# Logging Configuration - Production level
logging.level.com.graduation.sagaorchestratorservice=INFO
logging.level.org.springframework.kafka=WARN
logging.level.org.hibernate.SQL=WARN
logging.level.root=WARN

# Minimal logging customization
logging.pattern.console=%clr(%d{HH:mm:ss.SSS}){faint} %clr(%5p) %clr([%t]){faint} %clr(%-40.40logger{39}){cyan} : %m%n
spring.banner.location=classpath:banner.txt

# JSON formatting - Compact for production
spring.jackson.serialization.indent_output=false
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=UTC

# Add these properties to BE/SagaOrchestratorService/src/main/resources/application-local.properties
spring.data.redis.host=localhost
spring.data.redis.port=6379
spring.data.redis.password=password
spring.data.redis.lettuce.pool.max-active=16
spring.data.redis.lettuce.pool.max-idle=8
spring.data.redis.lettuce.pool.min-idle=2
spring.data.redis.timeout=3000ms


saga.lock.timeout-seconds=120
saga.lock.retry-attempts=3
saga.lock.retry-delay-ms=500
saga.lock.max-retry-delay-ms=5000

# Enhanced saga timeouts
saga.processing.max-duration-minutes=15
saga.processing.heartbeat-interval-seconds=30

# Saga lock monitoring and cleanup
saga.lock.monitoring.enabled=true
saga.lock.health-check.interval-seconds=60

# Logging configuration for distributed locking
logging.level.com.graduation.sagaorchestratorservice.service.OrderPurchaseSagaService=DEBUG
logging.level.com.graduation.sagaorchestratorservice.service.RedisLockService=DEBUG